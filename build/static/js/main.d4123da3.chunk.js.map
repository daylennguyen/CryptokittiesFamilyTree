{"version":3,"sources":["components/DarkModeToggleButton.tsx","components/Description.tsx","components/KittySubmit.tsx","components/ScanningKittiesLoader.tsx","components/Title.tsx","network.tsx","util/fetchKitty.js","index.tsx"],"names":["props","icon","isDark","Fab","color","aria-label","style","position","right","bottom","onClick","DescriptionText","Typography","variant","ExpansionPanel","marginBottom","marginTop","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","justifyContent","KittySubmit","onSubmit","event","persist","preventDefault","input","document","querySelector","onKittySubmit","display","flexFlow","alignItems","TextField","required","fullWidth","name","id","label","htmlFor","Button","marginLeft","type","Box","flexDirection","CircularProgress","count","activeStep","Title","React","kittyEmoji","setEmoji","Emotes","href","textDecoration","role","onMouseOver","rand","Math","floor","random","onMouseLeave","StructureNetwork","networkComponent","console","log","this","current","network","on","background","border","options","autoResize","layout","hierarchical","direction","sortMethod","nodes","font","size","edges","arrows","ref","map","singleNode","singleEdge","apiURL","invalidKittyAlert","kittyid","makeEdgeComponent","json","key","from","to","makeNodeComponent","gen","shape","image","img","ExtractNode","jsonKitty","image_url_cdn","generation","ExtractEdge","edgeid","matron","sire","callback","setCount","setActiveStep","a","NodeArray","EdgeArray","Kittyqueue","fetch","response","text","jsonForm","JSON","parse","error","alert","push","edgeIdCount","fetchingCKOnInterval","setInterval","length","currentKitty","shift","curredge","nodeJson","clearInterval","KittyNodeComponents","KittyEdgeComponents","edgeJson","darkTheme","createMuiTheme","palette","lightTheme","App","state","kittyNodes","kittyEdges","scannedKitties","theme","ThemeProvider","CssBaseline","DarkModeToggleButton","setState","className","Container","Description","Card","padding","address","result","includes","checkForFullKittyAddress","slice","lastIndexOf","isNaN","Number","parseInt","asyncGetKittyJSON","Nodes","Edges","ScannedCount","step","ScanningKittiesLoader","Stepper","alternativeLabel","Step","StepLabel","rootElement","getElementById","render"],"mappings":"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","file":"static/js/main.d4123da3.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport Brightness5Icon from \"@material-ui/icons/Brightness5Outlined\";\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4Outlined\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\n\r\n// Floating Action Button used to toggle on/off the dark theme\r\nexport default function(props: { isDark: boolean; onClick: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined; }) {\r\n\tvar icon = props.isDark === true ? <Brightness4Icon /> : <Brightness5Icon />;\r\n\treturn (\r\n\t\t<Fab\r\n\t\t\tcolor={props.isDark === true ? \"primary\" : \"secondary\"}\r\n\t\t\taria-label=\"Dark Mode Toggle\"\r\n\t\t\tstyle={{ position: \"fixed\", right: \"25px\", bottom: \"75px\" }}\r\n\t\t\tonClick={props.onClick}\r\n\t\t>\r\n\t\t\t{icon}\r\n\t\t</Fab>\r\n\t);\r\n}\r\n","import {\r\n\tExpansionPanel,\r\n\tExpansionPanelDetails,\r\n\tExpansionPanelSummary,\r\n\tTypography,\r\n} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport React from 'react';\r\n\r\nconst DescriptionText = () => (\r\n\t<Typography color=\"textSecondary\" variant=\"body2\">\r\n\t\tCK-Tree is an open-source cryptokitty ancestor visualization tool.\r\n\t\t<br />\r\n\t\tEnter a kitty id or full kitty id to scan a kittie's ancestors and display\r\n\t\tan awesome network-graph/family tree!\r\n\t</Typography>\r\n);\r\n\r\n// The expandable panel at the top of the page\r\nexport default function(props: any) {\r\n\treturn (\r\n\t\t<ExpansionPanel style={{ marginBottom: '10px', marginTop:'20px' }}>\r\n\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t<Typography variant='subtitle2'><strong>Description</strong></Typography>\r\n\t\t\t</ExpansionPanelSummary>\r\n\t\t\t<ExpansionPanelDetails style={{ justifyContent: 'center' }}>\r\n\t\t\t\t{' '}\r\n\t\t\t\t<DescriptionText />\r\n\t\t\t</ExpansionPanelDetails>\r\n\t\t</ExpansionPanel>\r\n\t);\r\n}\r\n","import * as React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button  from \"@material-ui/core/Button\";\r\n// Component containing the form in which the user will input and submit the kitty id\r\ninterface SelectProtected {\r\n    readonly idField: HTMLElement;\r\n}\r\n\r\nfunction KittySubmit(props: { onKittySubmit: (arg0: any) => void; }) {\r\n\treturn (\r\n\t\t<form\r\n\t\t\tonSubmit={(event) => {\r\n\t\t\t\tevent.persist();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\t// get the text-field value\r\n\t\t\t\tlet kittyIdField = document.querySelector(\"#kitty-id-field\") as HTMLElement \r\n\t\t\t\tlet input: SelectProtected = kittyIdField[\"value\"];\r\n\t\t\t\tprops.onKittySubmit(input);\r\n\t\t\t}}\r\n\t\t\tstyle={{\r\n\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\tflexFlow: \"row\",\r\n\t\t\t\talignItems: \"center\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<TextField\r\n\t\t\t\trequired\r\n\t\t\t\tfullWidth\r\n\t\t\t\tname=\"kitty-id-field\"\r\n\t\t\t\tid=\"kitty-id-field\"\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\tlabel=\"Kitty id or Full Kitty Url\"\r\n\t\t\t/>\r\n\t\t\t<label htmlFor=\"submit-kitty-id-button\">\r\n\t\t\t\t<Button\r\n\t\t\t\t\tstyle={{ marginLeft: \"25px\" }}\r\n\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t>\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</Button>\r\n\t\t\t</label>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default KittySubmit;\r\n","import * as React from 'react';\r\nimport { CircularProgress, Box, Typography } from '@material-ui/core';\r\n\r\n//\r\nexport default function(props: { count: React.ReactNode; activeStep: number; }) {\r\n\treturn (\r\n\t\t<Box\r\n\t\t\tstyle={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}\r\n\t\t>\r\n\t\t\t<CircularProgress style={{ marginBottom: 10 }} />\r\n\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t{props.count}{' '}\r\n\t\t\t\t{props.activeStep === 1\r\n\t\t\t\t\t? 'Kitties Scanned'\r\n\t\t\t\t\t: 'Kitties Converted to Graph Elements'}\r\n\t\t\t</Typography>\r\n\t\t</Box>\r\n\t);\r\n}\r\n","import * as React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function Title() {\r\n\tconst [kittyEmoji, setEmoji] = React.useState('🐱');\r\n\tconst Emotes = ['😼', '😹', '🙀', '😾', '😿', '😻', '😺', '😸', '😽'];\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<a href=\"/\" style={{ textDecoration: 'none' }}>\r\n\t\t\t\t<Typography variant=\"h1\" color=\"textPrimary\">\r\n\t\t\t\t\tCK-Tree\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\trole=\"img\"\r\n\t\t\t\t\t\taria-label=\"kitty\"\r\n\t\t\t\t\t\tonMouseOver={() => {\r\n\t\t\t\t\t\t\t// set the kitty face to a random one from the array\r\n\t\t\t\t\t\t\tlet rand = Math.floor(Math.random() * 9) + 1;\r\n\t\t\t\t\t\t\tsetEmoji(Emotes[rand]);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonMouseLeave={() => {\r\n\t\t\t\t\t\t\t// return the kitty face to default value\r\n\t\t\t\t\t\t\tsetEmoji('🐱');\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{kittyEmoji}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span role=\"img\" aria-label=\"tree\">\r\n\t\t\t\t\t\t🌲\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</Typography>\r\n\t\t\t</a>\r\n\t\t</header>\r\n\t);\r\n}\r\n","import * as React from \"react\";\r\nimport { Network } from \"@lifeomic/react-vis-network\";\r\n\r\ninterface NetProps {\r\n\tclassName:string\r\n\tisDark:boolean\r\n\tedges:any[]\r\n\tnodes:any[]\r\n}\r\n\r\n// Use VisJS network graph to display the family tree. In style 😎\r\nexport class StructureNetwork extends React.Component<NetProps,{}> {\r\n\tprivate networkComponent: any = React.createRef();\r\n\t// constructor(props: any){\r\n\t// \tsuper(props);\r\n\t// }\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(this.networkComponent);\r\n\t\tthis.networkComponent.current.network.on(\"click\", (event) => {\r\n\t\t\tconsole.log(\"clicked\", event);\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t// const {isDark,nodes,edges} = props\r\n\t\tconst result = (<Network\r\n\t\t\tstyle={{\r\n\t\t\t\tbackground: this.props.isDark === false ? \"white\" : \"#424242\",\r\n\t\t\t\tborder: \"black solid 1px\",\r\n\t\t\t}}\r\n\t\t\toptions={{\r\n\t\t\t\tautoResize: true,\r\n\t\t\t\tlayout: {\r\n\t\t\t\t\thierarchical: {\r\n\t\t\t\t\t\tdirection: \"DU\",\r\n\t\t\t\t\t\tsortMethod: \"directed\",\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tnodes: {\r\n\t\t\t\t\tfont: {\r\n\t\t\t\t\t\tsize: 32,\r\n\t\t\t\t\t\tcolor: this.props.isDark === false ? \"black\" : \"white\",\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tedges: {\r\n\t\t\t\t\tarrows: \"from\",\r\n\t\t\t\t},\r\n\t\t\t}}\r\n\t\t\tref={this.networkComponent}\r\n\t\t>\r\n\t\t\t{this.props.nodes === []\r\n\t\t\t\t? null\r\n\t\t\t\t: this.props.nodes.map((singleNode) => {\r\n\t\t\t\t\t\treturn singleNode;\r\n\t\t\t\t  })}\r\n\t\t\t{this.props.edges === []\r\n\t\t\t\t? null\r\n\t\t\t\t: this.props.edges.map((singleEdge) => {\r\n\t\t\t\t\t\treturn singleEdge;\r\n\t\t\t\t  })}\r\n\t\t</Network>\r\n\t) as React.ReactNode\r\n\r\n\t\treturn (result);\r\n\t}\r\n}\r\n","// good example kitty small tree 922339\r\n// medium tree - 1812122\r\nimport React from 'react';\r\nimport { Node, Edge } from '@lifeomic/react-vis-network';\r\n// ex. kitty url\r\n// https://www.cryptokitties.co/kitty/1828056\r\nconst FETCH_INTERVAL = 700, // how often we make a fetch to the api\r\n\tSTEP_CONVERT_TO_ELEMENTS = 2,\r\n\tapiURL = 'https://api.cryptokitties.co/kitties/',\r\n\tkittyAnchor = '/kitty/',\r\n\tinvalidKittyAlert = (kittyid) =>\r\n\t\t`Invalid Kitty - Kitty Not Found!\\n\\nNo Kitty Found at:\\nhttps://api.cryptokitties.co/kitties/${kittyid}\\n\\nPlease enter a valid kitty id`;\r\nexport function checkForFullKittyAddress(address) {\r\n\tlet result = false;\r\n\tif (address.includes(kittyAnchor)) {\r\n\t\tresult = true;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport function fullAddressToShortID(address) {\r\n\tlet result = address.slice(\r\n\t\taddress.lastIndexOf(kittyAnchor) + kittyAnchor.length\r\n\t);\r\n\treturn result;\r\n}\r\n\r\nfunction makeEdgeComponent(json) {\r\n\tconst result = (<Edge key={json.id} id={json.id} from={json.from} to={json.to} />);\r\n\treturn result\r\n}\r\n\r\n// create the kitty node to be inserted into the graph\r\nfunction makeNodeComponent(json) {\r\n\treturn (\r\n\t\t<Node\r\n\t\t\tid={`${json.id}`}\r\n\t\t\tkey={`${json.key}`}\r\n\t\t\tlabel={`(Gen${json.gen}) (${\r\n\t\t\t\tjson.name !== null ? json.name : '#' + json.id\r\n\t\t\t})`}\r\n\t\t\tshape=\"image\"\r\n\t\t\tsize={50}\r\n\t\t\timage={json.img}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\n// removes unnecessary data from kitty json given by api\r\nconst ExtractNode = (jsonKitty) => {\r\n\treturn {\r\n\t\tid: jsonKitty.id,\r\n\t\tkey: jsonKitty.id,\r\n\t\timg: jsonKitty.image_url_cdn,\r\n\t\tgen: jsonKitty.generation,\r\n\t\tname: jsonKitty.name,\r\n\t};\r\n};\r\n// pass the child, it will return an object containing the JSON that will be converted to edges\r\nconst ExtractEdge = (jsonKitty, edgeid) => {\r\n\treturn {\r\n\t\tmatron: {\r\n\t\t\tfrom: jsonKitty.id,\r\n\t\t\tto: jsonKitty.matron.id,\r\n\t\t\tid: edgeid + 1,\r\n\t\t},\r\n\t\tsire: { from: jsonKitty.id, to: jsonKitty.sire.id, id: edgeid + 2 },\r\n\t};\r\n};\r\n\r\n// perform breadth first search to retrieve the ancestors of our kitties\r\nexport async function asyncGetKittyJSON(\r\n\tkittyid,\r\n\tcallback,\r\n\tsetCount,\r\n\tsetActiveStep\r\n) {\r\n\t//Array of JSON objects to be converted in to Nodes within the graph\r\n\tvar NodeArray = [], // id ,key ,label ,img\r\n\t\t// contains the edges for the graph (JSON OBJ)\r\n\t\tEdgeArray = [], // edges = id ,from ,to\r\n\t\t// holds the response, from fetching the matron and sire of each kitty.\r\n\t\t// the calls will end when this queue/array is empty.\r\n\t\tKittyqueue = [];\r\n\r\n\tvar currentKitty,\r\n\t\tresponse = await fetch(apiURL + kittyid);\r\n\tvar jsonForm = await response.text();\r\n\ttry {\r\n\t\tjsonForm = JSON.parse(jsonForm);\r\n\t} catch (error) {\r\n\t\t// jsonForm = null;\r\n\t\tif (jsonForm === 'Not Found' || jsonForm === 'Bad Request') {\r\n\t\t\talert(invalidKittyAlert);\r\n\t\t\tjsonForm = null;\r\n\t\t}\r\n\t\tsetActiveStep(0);\r\n\t}\r\n\tif (jsonForm !== null) {\r\n\t\t// kitty queue is initialized with the ck corresponding to the user input\r\n\t\tKittyqueue.push(jsonForm);\r\n\r\n\t\t// initialize with 420, because funny number. haha\r\n\t\tvar edgeIdCount = 420;\r\n\r\n\t\tvar fetchingCKOnInterval = setInterval(async () => {\r\n\t\t\tif (Kittyqueue.length > 0) {\r\n\t\t\t\tcurrentKitty = Kittyqueue.shift();\r\n\t\t\t\tNodeArray.push(ExtractNode(currentKitty));\r\n\r\n\t\t\t\t// generation 0 kitties dont have parents :'(\r\n\t\t\t\tif (currentKitty.generation > 0) {\r\n\t\t\t\t\tlet curredge = ExtractEdge(currentKitty, edgeIdCount);\r\n\t\t\t\t\tedgeIdCount += 2;\r\n\t\t\t\t\tEdgeArray.push(curredge['matron']);\r\n\t\t\t\t\tEdgeArray.push(curredge['sire']);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tlet response = await fetch(apiURL + curredge['matron'].to);\r\n\t\t\t\t\t\tlet jsonForm = await response.json();\r\n\t\t\t\t\t\tKittyqueue.push(jsonForm);\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\tconsole.error('Error while fetching matron', err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tlet response = await fetch(apiURL + curredge['sire'].to);\r\n\t\t\t\t\t\tlet jsonForm = await response.json();\r\n\t\t\t\t\t\tKittyqueue.push(jsonForm);\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\tconsole.error('Error while fetching sire', err);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsetCount(NodeArray.length);\r\n\t\t\t} else {\r\n\t\t\t\tclearInterval(fetchingCKOnInterval);\r\n\t\t\t\tsetActiveStep(STEP_CONVERT_TO_ELEMENTS);\r\n\t\t\t\t// make all of the graph nodes/components\r\n\t\t\t\tlet KittyNodeComponents = [],\r\n\t\t\t\t\tKittyEdgeComponents = [];\r\n\t\t\t\t// STEP_CONVERT_TO_ELEMENTS\r\n\t\t\t\tfor (const nodeJson in NodeArray) {\r\n\t\t\t\t\tKittyNodeComponents.push(makeNodeComponent(NodeArray[nodeJson]));\r\n\t\t\t\t\tsetCount(nodeJson);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const edgeJson in EdgeArray) {\r\n\t\t\t\t\tKittyEdgeComponents.push(makeEdgeComponent(EdgeArray[edgeJson]));\r\n\t\t\t\t\tsetCount(edgeJson);\r\n\t\t\t\t}\r\n\t\t\t\tcallback(KittyNodeComponents, KittyEdgeComponents);\r\n\t\t\t\tsetActiveStep(4);\r\n\t\t\t}\r\n\t\t}, FETCH_INTERVAL);\r\n\t}\r\n}\r\n","import {\r\n\tBox,\r\n\tCard,\r\n\tContainer,\r\n\tCssBaseline,\r\n\tStep,\r\n\tStepLabel,\r\n\tStepper,\r\n\tThemeProvider,\r\n\tTypography,\r\n} from '@material-ui/core';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport * as React from 'react';\r\nimport { render } from 'react-dom';\r\nimport DarkModeToggleButton from './components/DarkModeToggleButton';\r\nimport Description from './components/Description';\r\nimport KittySubmit from './components/KittySubmit';\r\nimport ScanningKittiesLoader from './components/ScanningKittiesLoader';\r\nimport Title from './components/Title';\r\nimport { StructureNetwork } from './network';\r\nimport './styles/styles.css';\r\nimport {\r\n\tasyncGetKittyJSON,\r\n\tcheckForFullKittyAddress,\r\n\tfullAddressToShortID,\r\n} from './util/fetchKitty';\r\n// const UntypedComponent = StructureNetwork as any\r\n// import PageStepper from './components/PageStepper';\r\n// Material UI theme objects passed to theme provide, primarily used to toggle dark theme\r\nconst darkTheme = createMuiTheme({\r\n\tpalette: {\r\n\t\ttype: 'dark',\r\n\t},\r\n});\r\nconst lightTheme = createMuiTheme({\r\n\tpalette: {\r\n\t\ttype: 'light',\r\n\t},\r\n});\r\n\r\ninterface Theme {\r\n\tisDark: boolean;\r\n}\r\ninterface AppState {\r\n\tkittyNodes: Array<React.ReactNode>;\r\n\tkittyEdges: Array<React.ReactNode>;\r\n\tactiveStep: number;\r\n\tscannedKitties: number;\r\n\ttheme: Theme;\r\n}\r\n// Root Application Component\r\nclass App extends React.Component<{}, AppState> {\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t// Node components given to visjs graph; updated by fetchkitty.js\r\n\t\t\tkittyNodes: [],\r\n\t\t\t// Edge compoenents given to visjs graph\r\n\t\t\tkittyEdges: [],\r\n\t\t\t// Stepper progress\r\n\t\t\tactiveStep: 0,\r\n\t\t\t// Count of kitties fetched through api\r\n\t\t\tscannedKitties: 0,\r\n\t\t\ttheme: {\r\n\t\t\t\tisDark: false,\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ThemeProvider\r\n\t\t\t\ttheme={this.state.theme.isDark === false ? lightTheme : darkTheme}\r\n\t\t\t>\r\n\t\t\t\t<CssBaseline />\r\n\t\t\t\t<DarkModeToggleButton\r\n\t\t\t\t\tisDark={this.state.theme.isDark}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\ttheme: {\r\n\t\t\t\t\t\t\t\tisDark: this.state.theme.isDark === true ? false : true,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<Box className=\"App\">\r\n\t\t\t\t\t<Title />\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<Description />\r\n\t\t\t\t\t\t<Card variant=\"outlined\" style={{ padding: '100px' }}>\r\n\t\t\t\t\t\t\t{this.state.activeStep === 0 ? (\r\n\t\t\t\t\t\t\t\t<KittySubmit\r\n\t\t\t\t\t\t\t\t\tonKittySubmit={(input) => {\r\n\t\t\t\t\t\t\t\t\t\tif (checkForFullKittyAddress(input)) {\r\n\t\t\t\t\t\t\t\t\t\t\t//parse the id from the url\r\n\t\t\t\t\t\t\t\t\t\t\tinput = fullAddressToShortID(input);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t// check for invalid input and parse int NaN==NotANumber\r\n\t\t\t\t\t\t\t\t\t\tif (!isNaN(Number.parseInt(input, 10)) && input !== '0') {\r\n\t\t\t\t\t\t\t\t\t\t\tinput = Number.parseInt(input, 10);\r\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ activeStep: 1 });\r\n\t\t\t\t\t\t\t\t\t\t\tasyncGetKittyJSON(\r\n\t\t\t\t\t\t\t\t\t\t\t\tinput,\r\n\t\t\t\t\t\t\t\t\t\t\t\t(Nodes: any, Edges: any) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkittyNodes: Nodes,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkittyEdges: Edges,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t(ScannedCount: any) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ scannedKitties: ScannedCount });\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t(step: any) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ activeStep: step });\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t{/* Show a loading bar on steps 1 & 2 */}\r\n\t\t\t\t\t\t\t{this.state.activeStep === 1 || this.state.activeStep === 2 ? (\r\n\t\t\t\t\t\t\t\t<ScanningKittiesLoader\r\n\t\t\t\t\t\t\t\t\tactiveStep={this.state.activeStep}\r\n\t\t\t\t\t\t\t\t\tcount={this.state.scannedKitties}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t<main>\r\n\t\t\t\t\t\t\t\t{this.state.activeStep === 4 ? (\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t<StructureNetwork\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"network\"\r\n\t\t\t\t\t\t\t\t\t\t\tisDark={this.state.theme.isDark}\r\n\t\t\t\t\t\t\t\t\t\t\tedges={this.state.kittyEdges}\r\n\t\t\t\t\t\t\t\t\t\t\tnodes={this.state.kittyNodes}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</main>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t<Stepper\r\n\t\t\t\t\t\t\tactiveStep={this.state.activeStep}\r\n\t\t\t\t\t\t\talternativeLabel\r\n\t\t\t\t\t\t\tstyle={{ marginTop: '10px' }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Step>\r\n\t\t\t\t\t\t\t\t<StepLabel>Submit KittyId</StepLabel>\r\n\t\t\t\t\t\t\t</Step>\r\n\t\t\t\t\t\t\t<Step>\r\n\t\t\t\t\t\t\t\t<StepLabel>Scan Ancestor Kitties</StepLabel>\r\n\t\t\t\t\t\t\t</Step>\r\n\t\t\t\t\t\t\t<Step>\r\n\t\t\t\t\t\t\t\t<StepLabel>Create Graph Elements</StepLabel>\r\n\t\t\t\t\t\t\t</Step>\r\n\t\t\t\t\t\t\t<Step>\r\n\t\t\t\t\t\t\t\t<StepLabel>View Graph</StepLabel>\r\n\t\t\t\t\t\t\t</Step>\r\n\t\t\t\t\t\t</Stepper>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t\t<footer>\r\n\t\t\t\t\t\t<a id=\"eth-donate\" href=\"https://flannyan.argent.xyz/\">\r\n\t\t\t\t\t\t\t<Typography variant=\"body1\" color=\"textPrimary\">\r\n\t\t\t\t\t\t\t\teth donations: 0xb41919C5700779c45116377657Ce56B4E3508eb3\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</footer>\r\n\t\t\t\t</Box>\r\n\t\t\t</ThemeProvider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst rootElement = document.getElementById('root');\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}